.PHONY: help install clean start build build-aab download status logs commit push setup check

# Variables
APP_NAME = StopList
VERSION := $(shell jq -r '.expo.version' app.json 2>/dev/null || echo "1.0.0")
BUILD_ID := $(shell eas build:list --limit 1 --json 2>/dev/null | jq -r '.[0].id // ""' 2>/dev/null || echo "")
BUILD_DIR = builds
APK_NAME = $(BUILD_DIR)/stoplist-v$(VERSION).apk

help: ## Show this help message
	@echo "$(APP_NAME) - Makefile Commands"
	@echo "================================"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'

setup: ## Initial setup - install dependencies
	@echo "üì¶ Installing dependencies..."
	@npm install
	@echo "‚úì Setup complete!"

install: ## Install/update dependencies
	@echo "üì¶ Installing dependencies..."
	@npm install
	@echo "‚úì Dependencies installed!"

check: ## Check if dependencies are installed
	@if [ ! -d "node_modules" ]; then \
		echo "‚ö†Ô∏è  node_modules not found. Installing dependencies..."; \
		npm install; \
	elif [ "node_modules" -ot "package.json" ]; then \
		echo "‚ö†Ô∏è  package.json newer than node_modules. Updating..."; \
		npm install; \
	else \
		echo "‚úì Dependencies up to date"; \
	fi

validate: check ## Validate config before building
	@echo "üîç Validating project configuration..."
	@npx expo config --type public > /dev/null 2>&1 || (echo "‚ùå Expo config validation failed" && exit 1)
	@echo "‚úì Expo config valid"
	@node -e "const pkg = require('./package.json'); const deps = Object.keys(pkg.dependencies); console.log('‚úì Dependencies:', deps.length); if (!deps.includes('expo')) { console.error('‚ùå Missing expo'); process.exit(1); }"
	@echo "‚úì All validations passed"

clean: ## Clean build artifacts and caches
	@echo "üßπ Cleaning..."
	rm -rf node_modules
	rm -rf .expo
	rm -rf android/app/build
	rm -rf android/build
	rm -rf $(BUILD_DIR)
	rm -f *.apk
	@echo "‚úì Clean complete!"

start: ## Start development server
	@echo "üöÄ Starting Expo development server..."
	npm start

android: ## Run on Android device/emulator
	@echo "üì± Running on Android..."
	npm run android

build: validate ## Build APK on EAS (validates first)
	@echo "üèóÔ∏è  Starting EAS build (APK)..."
	@echo "‚ö†Ô∏è  This will use your EAS build credits"
	@eas build --platform android --profile preview --non-interactive
	@echo ""
	@echo "üìä Checking build status..."
	@make status

build-aab: validate ## Build AAB (App Bundle) for Google Play Store
	@echo "üèóÔ∏è  Starting EAS build (AAB for Play Store)..."
	@echo "‚ö†Ô∏è  This will use your EAS build credits"
	@echo "üì¶ Building production App Bundle..."
	@eas build --platform android --profile production-aab --non-interactive
	@echo ""
	@echo "üìä Checking build status..."
	@make status
	@echo ""
	@echo "‚úÖ AAB will be ready for Google Play Store upload!"

test: validate ## Run comprehensive pre-build tests
	@echo ""
	@echo "üß™ Running comprehensive pre-build tests..."
	@echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
	@echo ""
	@echo "1Ô∏è‚É£  Checking essential files exist..."
	@test -f App.jsx && echo "   ‚úì App.jsx exists" || (echo "   ‚ùå App.jsx missing" && exit 1)
	@test -f SplashScreen.jsx && echo "   ‚úì SplashScreen.jsx exists" || (echo "   ‚ùå SplashScreen.jsx missing" && exit 1)
	@test -f App.js && echo "   ‚úì App.js wrapper exists" || (echo "   ‚ùå App.js missing" && exit 1)
	@echo ""
	@echo "2Ô∏è‚É£  Verifying SplashScreen import in App.jsx..."
	@grep -q "import SplashScreen from './SplashScreen'" App.jsx && echo "   ‚úì SplashScreen import found" || (echo "   ‚ùå Missing SplashScreen import!" && exit 1)
	@echo ""
	@echo "3Ô∏è‚É£  Checking Firebase configuration..."
	@test -f firebaseConfig.js && echo "   ‚úì firebaseConfig.js exists" || (echo "   ‚ùå Missing firebaseConfig.js" && exit 1)
	@test -d node_modules/firebase && echo "   ‚úì Firebase JS SDK installed" || (echo "   ‚ùå Firebase SDK missing" && exit 1)
	@grep -q "logAnalyticsEvent" App.jsx && echo "   ‚úì Firebase integrated in App.jsx" || (echo "   ‚ùå Firebase not integrated" && exit 1)
	@echo ""
	@echo "4Ô∏è‚É£  Checking critical dependencies..."
	@test -d node_modules/react-native-gesture-handler && echo "   ‚úì gesture-handler installed" || (echo "   ‚ùå gesture-handler missing" && exit 1)
	@test -d node_modules/react-native-reanimated && echo "   ‚úì reanimated installed" || (echo "   ‚ùå reanimated missing" && exit 1)
	@test -d node_modules/react-native-modal && echo "   ‚úì modal installed" || (echo "   ‚ùå modal missing" && exit 1)
	@echo ""
	@echo "5Ô∏è‚É£  Validating JSON configs..."
	@jq empty app.json 2>/dev/null && echo "   ‚úì app.json valid" || (echo "   ‚ùå app.json invalid JSON" && exit 1)
	@jq empty eas.json 2>/dev/null && echo "   ‚úì eas.json valid" || (echo "   ‚ùå eas.json invalid JSON" && exit 1)
	@jq empty package.json 2>/dev/null && echo "   ‚úì package.json valid" || (echo "   ‚ùå package.json invalid JSON" && exit 1)
	@echo ""
	@echo "6Ô∏è‚É£  Checking version consistency..."
	@APP_VER=$$(jq -r '.expo.version' app.json); PKG_VER=$$(jq -r '.version' package.json); \
	if [ "$$APP_VER" = "$$PKG_VER" ]; then \
		echo "   ‚úì Version consistent ($$APP_VER)"; \
	else \
		echo "   ‚ö†Ô∏è  Version mismatch: app.json=$$APP_VER, package.json=$$PKG_VER"; \
	fi
	@echo ""
	@echo "7Ô∏è‚É£  Verifying Android configuration..."
	@grep -q "hermesEnabled=false" android/gradle.properties && echo "   ‚úì Hermes disabled for Pi (EAS will enable)" || echo "   ‚ö†Ô∏è  Hermes config may cause local issues"
	@echo ""
	@echo "8Ô∏è‚É£  Testing Expo configuration..."
	@npx expo config --type public > /dev/null 2>&1 && echo "   ‚úì Expo config loads successfully" || (echo "   ‚ùå Expo config has errors" && exit 1)
	@echo ""
	@echo "9Ô∏è‚É£  Checking EAS configuration..."
	@test -f eas.json && echo "   ‚úì eas.json exists" || (echo "   ‚ùå Missing eas.json" && exit 1)
	@jq -e '.build.preview.android.buildType' eas.json > /dev/null && echo "   ‚úì EAS build config valid" || (echo "   ‚ùå EAS config invalid" && exit 1)
	@echo ""
	@echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
	@echo "‚úÖ ALL TESTS PASSED - READY TO BUILD!"
	@echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
	@echo ""
	@echo "üìù Summary:"
	@echo "   ‚Ä¢ Essential files: ‚úì"
	@echo "   ‚Ä¢ SplashScreen import: ‚úì"
	@echo "   ‚Ä¢ Firebase: ‚úì (JS SDK - Expo compatible)"
	@echo "   ‚Ä¢ AdMob: ‚úì (Google Mobile Ads SDK)"
	@echo "   ‚Ä¢ Custom Date/Time Picker: ‚úì"
	@echo "   ‚Ä¢ Dependencies: ‚úì (13 packages)"
	@echo "   ‚Ä¢ Configurations: ‚úì (JSON valid)"
	@echo "   ‚Ä¢ Version: $(VERSION)"
	@echo ""
	@echo "üöÄ Run 'make build' to build on EAS cloud"
	@echo ""

status: ## Check latest build status
	@echo "üìä Latest build status:"
	@eas build:list --limit 1

logs: ## View latest build logs
	@echo "üìã Opening build logs..."
	@BUILD_ID=$$(eas build:list --limit 1 --json 2>/dev/null | jq -r '.[0].id // ""'); \
	if [ -n "$$BUILD_ID" ]; then \
		eas build:view $$BUILD_ID; \
	else \
		echo "‚ùå No builds found"; \
	fi

download: ## Download latest successful APK/AAB
	@echo "üì• Downloading build..."
	@mkdir -p $(BUILD_DIR)
	@echo "üîç Finding latest successful build..."
	@APK_URL=$$(eas build:list --platform android --limit 5 --non-interactive 2>/dev/null | grep -A 20 "Status.*finished" | grep "Application Archive URL" | head -1 | awk '{print $$NF}'); \
	if [ -z "$$APK_URL" ] || [ "$$APK_URL" = "null" ]; then \
		echo "‚ùå No successful build found"; \
		echo "‚ÑπÔ∏è  Run 'make status' to check build status"; \
		echo "‚ÑπÔ∏è  Run 'make build' to create a new build"; \
		exit 1; \
	fi; \
	echo "üì¶ Downloading from: $$APK_URL"; \
	echo "üìÅ Saving to: $(APK_NAME)"; \
	echo ""; \
	FILE_EXT=$$(echo $$APK_URL | grep -q '\.aab' && echo 'aab' || echo 'apk'); \
	OUTPUT_NAME=$(BUILD_DIR)/stoplist-v$(VERSION).$$FILE_EXT; \
	if curl -# -L -o $$OUTPUT_NAME "$$APK_URL"; then \
		echo ""; \
		echo "‚úÖ SUCCESS! Downloaded: $$OUTPUT_NAME"; \
		ls -lh $$OUTPUT_NAME; \
		echo ""; \
		if [ "$$FILE_EXT" = "aab" ]; then \
			echo "üì¶ App Bundle (AAB) ready for Google Play Store upload!"; \
			echo "   1. Go to play.google.com/console"; \
			echo "   2. Select your app"; \
			echo "   3. Go to 'Production' or 'Testing' track"; \
			echo "   4. Upload $$OUTPUT_NAME"; \
		else \
			echo "üì± APK ready for testing:"; \
			echo "   1. Transfer $$OUTPUT_NAME to your phone"; \
			echo "   2. Enable 'Install from Unknown Sources'"; \
			echo "   3. Tap the file to install"; \
		fi; \
		echo ""; \
		echo "üéâ Your StopList app is ready!"; \
	else \
		echo ""; \
		echo "‚ùå Download failed"; \
		exit 1; \
	fi

commit: ## Commit changes with message (usage: make commit MSG="your message")
	@if [ -z "$(MSG)" ]; then \
		echo "‚ùå Please provide a commit message: make commit MSG=\"your message\""; \
		exit 1; \
	fi
	git add -A
	git commit -m "$(MSG)"
	@echo "‚úì Changes committed!"

push: ## Push to remote repository
	@echo "üöÄ Pushing to remote..."
	git push
	@echo "‚úì Pushed to remote!"

cp: ## Commit and push (usage: make cp MSG="your message")
	@make commit MSG="$(MSG)"
	@make push

version: ## Show current version
	@echo "$(APP_NAME) v$(VERSION)"

info: ## Show project information
	@echo "Project: $(APP_NAME)"
	@echo "Version: $(VERSION)"
	@echo "Package: com.sinabehdadk.stoplist"
	@echo "Platform: Android"
	@echo "SDK: Expo 51"

# Development helpers
dev: start ## Alias for start

run: android ## Alias for android

# Quick build and download
quick: build download ## Build and download APK in one command
